>>> modified = os.listdir("modified")
>>> modified[0]
'6fe5cd87b3c88f61ce0bf7973fc84b4fe8d4242e16c8c6b4b16a88a3e03ff04c'  
>>> modified = np.array(modified)
>>> modified[0]
'6fe5cd87b3c88f61ce0bf7973fc84b4fe8d4242e16c8c6b4b16a88a3e03ff04c'
>>> modified = "modified/" + "modified
  File "<stdin>", line 1
    modified = "modified/" + "modified
                                     ^
SyntaxError: EOL while scanning string literal
>>> modified = "modified/" + modified
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
numpy.core._exceptions.UFuncTypeError: ufunc 'add' did not contain a loop with signature matching types (dtype('<U64'), dtype('<U64')) -> dtype('<U64')
>>> os.path.getsize("modified/"+modified[0])
3
>>> import subprocess
>>> def du(path):
      """disk usage in human readable format (e.g. '2,1GB')"""
      return subprocess.check_output(['du','-s', path]).split()[0].decode('utf-8')
>>> print(du("modified"))

^CTraceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in du
  File "/usr/lib/python3.8/subprocess.py", line 411, in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
  File "/usr/lib/python3.8/subprocess.py", line 491, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1011, in communicate
    stdout = self.stdout.read()
KeyboardInterrupt
>>>
>>>
>>> print(du("modified/"+modified[0]))
12M
>>> modified = os.listdir("modified")
>>> modified = map(lambda path: "modified/"+path, "modified))
  File "<stdin>", line 1
    modified = map(lambda path: "modified/"+path, "modified))
                                                            ^
SyntaxError: EOL while scanning string literal
>>> modified = map(lambda path: "modified/"+path, modified))
  File "<stdin>", line 1
    modified = map(lambda path: "modified/"+path, modified))
                                                           ^
SyntaxError: unmatched ')'
>>> modified = map(lambda path: "modified/"+path, modified)
>>> modified[0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'map' object is not subscriptable
>>> modified = list(map(lambda path: "modified/"+path, modified))
>>> modified[0]
'modified/modified/6fe5cd87b3c88f61ce0bf7973fc84b4fe8d4242e16c8c6b4b16a88a3e03ff04c'
>>> modified = os.listdir("modified")
>>> modified = list(map(lambda path: "modified/"+path, modified))
>>> modified[0]
'modified/6fe5cd87b3c88f61ce0bf7973fc84b4fe8d4242e16c8c6b4b16a88a3e03ff04c'
>>> files = os.listdir("modified")
>>> modified = list(map(lambda path: "modified/"+path, files))
>>> none = list(map(lambda path: "none/"+path, files))


sizes_mod = list(map(lambda path: float(du(path).split("M")[0].replace(",", ".")), modified[:500]))
sizes_none = list(map(lambda path: float(du(path).split("M")[0].replace(",", ".")), none[:500]))


>>> def du(path):
...       """disk usage in human readable format (e.g. '2,1GB')"""
...       return subprocess.check_output(['du','-s', path]).split()[0].decode('utf-8')
...
>>> modified = os.listdir("modified")
>>> modified = list(map(lambda path: "modified/"+path+"/0", files))
>>> none = list(map(lambda path: "none/"+path + "/0", files))
>>> sizes_mod = list(map(lambda path: int(du(path)), modified[:500]))
>>> sizes_none = list(map(lambda path: int(du(path)), none[:500]))

https://stackoverflow.com/questions/20295646/python-ascii-plots-in-terminal
fig.plot([i for i in range(len(sizes_mod))], np.array(sizes_none) - np.array(sizes_mod),label="data", width=100, height=100)

>>> counts, bin_edges = np.histogram(sizes_none)
>>> fig.hist(counts, bin_edges, orientation="horizontal", force_ascii=False)
>>> fig.show(
... )

counts, bin_edges = np.histogram(sizes_none, bins=[i for i in range(0, 80000, 10000)])
